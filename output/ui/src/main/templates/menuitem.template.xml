<?xml version="1.0" encoding="UTF-8"?>

<cdk:root xmlns="http://jboss.org/schema/richfaces/cdk/xhtml-el" 
	xmlns:cdk="http://jboss.org/schema/richfaces/cdk/core"
    xmlns:c="http://jboss.org/schema/richfaces/cdk/jstl/core" 
    xmlns:cc="http://jboss.org/schema/richfaces/cdk/jsf/composite"
    xmlns:javaee="http://java.sun.com/xml/ns/javaee">

    <cc:interface>
        <cdk:class>org.richfaces.renderkit.html.MenuItemRenderer</cdk:class>
        <cdk:superclass>org.richfaces.renderkit.html.MenuItemRendererBase</cdk:superclass>
        <cdk:component-family>org.richfaces.DropDownMenu</cdk:component-family>
        <cdk:renderer-type>org.richfaces.MenuItemRenderer</cdk:renderer-type>
        <cdk:renders-children>true</cdk:renders-children>
        
        <cdk:resource-dependency name="dropdownmenu.ecss" library="org.richfaces" />
        <cdk:resource-dependency name="ajax.reslib" library="org.richfaces" />
        <cdk:resource-dependency name="base-component.reslib" library="org.richfaces" />
    </cc:interface>

    <cc:implementation>
    	<cdk:object name="style" value="#{component.attributes['style']}" />
    	<cdk:object name="iconClass" type="java.lang.String" value="#{getStyleClass(facesContext, component, '', 'iconClass', 'iconClass')}" />
    	<cdk:object name="labelClass" type="java.lang.String" value="#{getStyleClass(facesContext, component, '', 'labelClass', 'labelClass')}" />
    	<cdk:object name="styleClass" type="java.lang.String" value="#{getStyleClass(facesContext, component, 'itemClass', 'styleClass', 'styleClass')}" />
    	<cdk:object name="selectedClass" type="java.lang.String" value="#{getStyleClass(facesContext, component, 'selectedItemClass', 'selectedClass', 'selectedClass')}" />
    	<cdk:object name="disabledClass" type="java.lang.String" value="#{getStyleClass(facesContext, component, 'disabledItemClass', 'disabledClass', 'disabledClass')}" />
    	    
    	<cdk:object name="isDisabled" type="boolean" value="#{isDisabled(facesContext, component)}" />
    	<cdk:object name="onmouseover" type="java.lang.String" value="this.className='rf-ddm-itm rf-ddm-itm-sel #{selectedClass}'" />
    	<cdk:object name="onmouseout" type="java.lang.String" value="this.className='rf-ddm-itm rf-ddm-itm-unsel #{styleClass}'" />
    	    
	    <cdk:object name="iconFacet" value="#{getIconFacet(facesContext, component)}" type="javax.faces.component.UIComponent" />
	    <cdk:object name="iconAttribute" value="#{getIconAttribute(facesContext, component)}" type="java.lang.String" />
    
		<div id="#{clientId}" class="rf-ddm-itm #{isDisabled ? 'rf-ddm-itm-dis '+disabledClass : 'rf-ddm-itm-unsel '+styleClass}"  style="#{style}"
			onmouseover="#{isDisabled ? '' : onmouseover}" 
			onmouseout="#{isDisabled ? '' : onmouseout}"
			onclick="#{getOnClickFunction(facesContext, component)}" 
			cdk:passThroughWithExclusions="">
			<span class="rf-ddm-itm-ic #{iconClass}">
				<c:choose>
					<c:when test="#{iconFacet != null and iconFacet.isRendered()}">
						<cdk:call expression="iconFacet.encodeAll(facesContext)" />	
					</c:when>
					<c:when test="#{not isStringEmpty(iconAttribute)}">
						<img width="16" height="16" src="#{RenderKitUtils.getResourceURL(iconAttribute, facesContext)}" alt="" />	
					</c:when>
					<c:otherwise>
						<div class="rf-ddm-emptyIcon"></div>			
					</c:otherwise>
				</c:choose>
			</span>

			<c:choose>
				<c:when test="#{not isDisabled}">
					<span class="rf-ddm-itm-lbl #{labelClass}">
						<c:choose>
							<c:when test="#{not empty component.attributes['label']}">
								#{component.attributes['label']}
							</c:when>		
							<c:otherwise>
								<cdk:call expression="renderChildren(facesContext, component);" />
							</c:otherwise>
						</c:choose>	
					</span>
				</c:when>
				<c:otherwise>
					<c:choose>
						<c:when test="#{not empty component.attributes['label']}">
							#{component.attributes['label']}
						</c:when>		
						<c:otherwise>
							<cdk:call expression="renderChildren(facesContext, component);" />
						</c:otherwise>
					</c:choose>	
				</c:otherwise>
			</c:choose>			

		</div>	
    </cc:implementation>
</cdk:root>
